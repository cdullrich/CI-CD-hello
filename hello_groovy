node('master')
{
    timestamps{
        try {
            stage ('Cleanup Workspace') {
                echo "Cleaning workspace: ${env.WORKSPACE}"
                deleteDir()
                sh 'sudo docker rm -f -a'
                sh 'sudo docker rmi -af'
            }
            stage ('Checkout Hello Code')
            {
                echo "checking out code"
                git url: 'https://github.com/cdullrich/CI-CD-hello/'
            }
            stage ('make a sandwich')
            {
                echo "I am so hungry, I need a sandwich!"
            }
            stage ('build Go code')
            {
                echo "building application"
                sh 'go get github.com/gorilla/mux'
                sh 'env GOOS=linux GOARCH=amd64 go build -o HomeAdvisor'
            }
            stage ('dockerize build')
            {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '9bd0098f-db72-4ec1-b29b-051e0c635eb8', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]){
                    echo "dockerizing build"
                    sh 'podman login registry.redhat.io -u ${USERNAME} -p ${PASSWORD}'
                    sh 'sudo -s docker build -t hello-advisor .'
                }
            }
            stage ('eat the sandwich')
            {
                echo "This sandwich is going to taste so good! Nomnomnomnom!"
            }
            stage ('test build')
            {
                sh 'sudo -s docker run -d -p 30000:30000 hello-advisor'
                echo "verifying build's expected http response"
                sh 'sleep 5'
                def http_test = "curl http://localhost:30000".execute().text
                echo "response is ${http_test}" 
                assert http_test == 'Hello, HomeAdvisor!'
            }
            stage ('publish to artifactory')
            {
                echo "we don't actually have artifactory linked up, but we would do it here"
            }
            stage ('deploy to cluster')
            {
                echo "deploying build to production (let's do this last)"
            }
        }
        catch (err) {
            echo "woopsie doopsie: ${err}"
            echo "cleaning up docker images and containers"
            sh 'sudo docker system prune -af'
            currentBuild.result = 'FAILURE'
        }
    }
}


